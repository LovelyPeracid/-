事务四大特性
	原子性
	一致性（双方 转账 总余额不变
	隔离性
	持久性 对数据库的影响是永久的
A事务 读到了B事务未提交的数据就是脏读

一个事务中 同样的sql查出来结果不一样就是不可重复读

查的时候没有 插入的时候又有了 就是幻读 用隔离级别解决
串行化

创建表 指定存储引擎

innodb 和myisam  
支持行锁
支持事务
支持外键


myisam 是以读和插入为主 
memory 是内存中 速度快  对表大小有限制 而且无法保证数据安全

索引 提高效率降低io成本  
索引也要占空间的 索引只是提高了查询 但是更新删除插入还要维护索引就很费时间说

b+ 
hash 精准查询有效 不支持范围查询
R-tree 空间数据库
Full-text 倒排索引 

mysql优化的b+ 增加了一个指向相邻叶子结点的指针 提高了区间访问性能

页16K 行
memory 支持hash  innodb有自适应hash的功能


主键索引 
唯一索引
常规索引
全文索引

聚集索引  默认主键 没有主键就是unique 不然就是 rowid 作为隐藏的聚集索引
二级索引  挂着id 

慢查询日志
	
profile 查看性能不佳的sql

explain 执行计划


连接类型 性能 
null systeam  const eq_ref range  index 索引树扫描 all 全盘扫描
ref是非唯一键
const是主键查询

rows 预估值
 
filtered   结果占需要读取的百分比 越大越好

using index condition 

using where using index

索引使用原则


联合索引就是多个字段 
如果最左边的失效 索引也失效

最左前缀 就是 最左边必须有 不能缺  顺序无所谓


如果中间缺了一列 后面的索引失效

范围查询 最好写大于等于 小于等于 不然会失效
函数运算会导致索引失效
字符串不加单引号也会失效
尾部模糊不会导致索引失效 头部会导致索引失效

or 如果 一侧没有索引都会失效

数据分布影响
如果全表扫描更快 放弃索引


force index 
using where using index 性能高 
using index condition 是用到索引但是要回表查询


二级索引 数据不够就要回表查询

select * 容易回表查询 

前缀索引 varchar text

 推荐联合索引
  批量插入效率更高
  
  insert 优化 
  批量插入 
  手动提交事务
  主键顺序插入

mysql --local_infile -u root -p 
乱序 会导致页分裂 因为要改动 链表指针 
  删的太多会合并 页合并
  
  order by 尽量用 using index  顺序和索引字段也要一致  
  尽量覆盖索引
   如果无法避免filesort 可以适当增大排序缓冲区 sort_buffer_size 默认256K
  
  
  age asc phone desc
  
  
  
  
  where group by也是满足最左前缀法则
  大数据limit 也要优化
  覆盖索引加子查询
  
  
  count(*) 不取值 效率最高
  
  update 
 没有索引就加表锁
  
  
  可以查询视图
  视图 不存数据 插入就是插 入到基表
  cascaded check option
  
  cascaded 是满足多个条件 比如基于一个视图创建的视图 两个sql条件都要符合  local 不需要
  是检查之前的 之后的不需要   
  
  
  查看系统变量默认session
  
  
  
  全局参数 重启默认失效
  etc/my.cnf 配置参数
  
  @@系統變量
  @用户变量
  
  ：=初始化
  读未提交
  读已提交
  可重复读 
  串行化
  
  脏读 幻读（查的时候没有 插入的时候存在） 不可重复读 
  